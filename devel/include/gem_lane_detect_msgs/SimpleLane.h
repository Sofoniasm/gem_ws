// Generated by gencpp from file gem_lane_detect_msgs/SimpleLane.msg
// DO NOT EDIT!


#ifndef GEM_LANE_DETECT_MSGS_MESSAGE_SIMPLELANE_H
#define GEM_LANE_DETECT_MSGS_MESSAGE_SIMPLELANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gem_lane_detect_msgs
{
template <class ContainerAllocator>
struct SimpleLane_
{
  typedef SimpleLane_<ContainerAllocator> Type;

  SimpleLane_()
    : yaw_err(0.0)
    , offset(0.0)
    , curvature(0.0)  {
    }
  SimpleLane_(const ContainerAllocator& _alloc)
    : yaw_err(0.0)
    , offset(0.0)
    , curvature(0.0)  {
  (void)_alloc;
    }



   typedef float _yaw_err_type;
  _yaw_err_type yaw_err;

   typedef float _offset_type;
  _offset_type offset;

   typedef float _curvature_type;
  _curvature_type curvature;





  typedef boost::shared_ptr< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleLane_

typedef ::gem_lane_detect_msgs::SimpleLane_<std::allocator<void> > SimpleLane;

typedef boost::shared_ptr< ::gem_lane_detect_msgs::SimpleLane > SimpleLanePtr;
typedef boost::shared_ptr< ::gem_lane_detect_msgs::SimpleLane const> SimpleLaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator1> & lhs, const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator2> & rhs)
{
  return lhs.yaw_err == rhs.yaw_err &&
    lhs.offset == rhs.offset &&
    lhs.curvature == rhs.curvature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator1> & lhs, const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gem_lane_detect_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7ffa601eb572457d82f827982e252bd";
  }

  static const char* value(const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7ffa601eb572457ULL;
  static const uint64_t static_value2 = 0xd82f827982e252bdULL;
};

template<class ContainerAllocator>
struct DataType< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gem_lane_detect_msgs/SimpleLane";
  }

  static const char* value(const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## This expresses the estimated curve representing the lane center curve w.r.t\n"
"# the chosen reference frame on the ego vehicle.\n"
"# To uniquely define the lane and avoid confusions in positive and negative\n"
"# values, we first define the ego vehicle w.r.t the lane center curve and apply\n"
"# the coordinate transformation at the end.\n"
"# First, we assume the lane center line is an arc with the center point C and\n"
"# the radius r>0, and the reference point of ego car is at point P.\n"
"# We denote the intersection of the extended line C-P with the arc as the\n"
"# origin O. Given the origin O, we define O->C vector as the *y-axis* and\n"
"# the respective tangential vector as the *x-axis* using right hand rule.\n"
"# we can then derive the heading angle of the vehicle `yaw` w.r.t x-axis.\n"
"# Further, P should lie on the y-axis by definition and hence O->P vector is\n"
"# perpendicular to the tangent line. We therefore can use O->P vector as the\n"
"# lateral deviation `d`. We then transform to the ego vehicle coordinates and\n"
"# derive:\n"
"#\n"
"#   yaw_err = -yaw  (rad in [-pi, pi])\n"
"#   offset = -d (meters)\n"
"#   curvature = 1/r, when curvature==0, the curve collapse to a straight line.\n"
"#\n"
"# We can further assume |d| << r, that is, check |offset|*curvature << 1, so we\n"
"# can exclude the corner case that there are two tangent lines in a full circle.\n"
"#\n"
"# Message Fields:\n"
"\n"
"float32 yaw_err      # estimated heading error (rad in [-pi, pi]).\n"
"float32 offset       # estimated lateral offset, i.e., cross track error (m).\n"
"float32 curvature    # estimated curvature (m^-1). The value is always >=0.\n"
"\n"
"# Note 1: To avoid confusions in different definitions of signed curvature, we\n"
"# use unsigned curvature. Hence, left turn and right turn are distinguished by\n"
"# `yaw_err`, that is, `yaw_err` in [-pi/2, pi/2] is left turn, and `yaw_err` in\n"
"# [-pi, -pi/2] or [pi/2, pi] is right turn by definition.\n"
"#\n"
"# Note 2: or pure pursuit controller, the reference point is defined on the\n"
"# center of the rear axle of the ego vehicle. For the Stanley controller, the\n"
"# reference point is however defined on the center of the front axle.\n"
"# We recommend using SimpleLaneStamped message to also include the reference\n"
"# frame.\n"
;
  }

  static const char* value(const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw_err);
      stream.next(m.offset);
      stream.next(m.curvature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gem_lane_detect_msgs::SimpleLane_<ContainerAllocator>& v)
  {
    s << indent << "yaw_err: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_err);
    s << indent << "offset: ";
    Printer<float>::stream(s, indent + "  ", v.offset);
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEM_LANE_DETECT_MSGS_MESSAGE_SIMPLELANE_H
